version: '3'
services:
  # PostgreSQL 데이터베이스 서버
  multi-db:
    image: postgres:latest
    container_name: multi-db
    restart: always
    ports:
      - "${DB_PORT:-5432}:5432"  # 호스트의 DB_PORT(기본값 5432)를 컨테이너의 5432 포트에 매핑
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_MULTIPLE_DATABASES: ${DB_NAME_AUTH},${DB_NAME_USER},${DB_NAME_FILE}  # 여러 데이터베이스 생성
      TZ: UTC
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"  # 논리적 복제 활성화
    volumes:
      - ./postgres-data:/var/lib/postgresql/data  # 데이터 영속성
      - ./init-multi-db.sh:/docker-entrypoint-initdb.d/init-multi-db.sh  # 초기화 스크립트
      - ./logs/db:/var/log  # 로그 저장
    networks:
      - my-blog-network

  # Apache Zookeeper - Kafka의 분산 코디네이션 서비스
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - my-blog-network

  # Apache Kafka - 분산 스트리밍 플랫폼
  broker:
    image: confluentinc/cp-kafka:7.6.1
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - my-blog-network

  # Schema Registry - Kafka 메시지의 스키마 관리
  schema-registry:
    image: confluentinc/cp-schema-registry:7.6.1
    depends_on:
      - broker
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: broker:9092
    ports:
      - "8081:8081"
    networks:
      - my-blog-network

  # Kafka Connect - 데이터 통합 플랫폼
  connect:
    image: confluentinc/cp-kafka-connect:7.6.1
    depends_on:
      - broker
      - schema-registry
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: broker:9092
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components
    volumes:
      - ./connectors:/usr/share/confluent-hub-components
    command:
      - bash
      - -c
      - |
        confluent-hub install --no-prompt confluentinc/kafka-connect-jdbc:10.7.4
        /etc/confluent/docker/run
    networks:
      - my-blog-network

  # Kafka UI - Kafka 클러스터 관리 및 모니터링 UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - broker
      - connect
      - schema-registry
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: first
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://connect:8083
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
    networks:
      - my-blog-network

  # LocalStack - AWS 서비스 로컬 에뮬레이터
  localstack:
    image: localstack/localstack:latest
    container_name: localstack
    ports:
      - "4566:4566"
      - "4571:4571"
    environment:
      - SERVICES=s3  # S3 서비스만 활성화
      - DEBUG=0
      - DEFAULT_REGION=us-east-1
      - AWS_DEFAULT_REGION=us-east-1
      - HOSTNAME_EXTERNAL=localhost
    networks:
      - my-blog-network

  # OpenTelemetry Collector - 텔레메트리 데이터 수집 및 처리
  otel-collector:
    image: otel/opentelemetry-collector:latest
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
    networks:
      - my-blog-network

  # Jaeger - 분산 트레이싱 시스템
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"  # Jaeger UI
      - "14250:14250"  # Jaeger collector gRPC
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - my-blog-network

# 모든 서비스를 연결하는 Docker 네트워크
networks:
  my-blog-network:
    driver: bridge