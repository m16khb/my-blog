// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.0
//   protoc               v4.23.2
// source: auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { messageTypeRegistry } from "./typeRegistry";

export const protobufPackage = "auth";

export interface LoginRequest {
  $type: "auth.LoginRequest";
  loginId?: string | undefined;
  password?: string | undefined;
}

export interface LoginResponse {
  $type: "auth.LoginResponse";
  token?: string | undefined;
}

export interface LogoutRequest {
  $type: "auth.LogoutRequest";
  token?: string | undefined;
}

export interface LogoutResponse {
  $type: "auth.LogoutResponse";
  success?: boolean | undefined;
}

export interface ValidateTokenRequest {
  $type: "auth.ValidateTokenRequest";
  token?: string | undefined;
}

export interface ValidateTokenResponse {
  $type: "auth.ValidateTokenResponse";
  valid?: boolean | undefined;
}

export const AUTH_PACKAGE_NAME = "auth";

function createBaseLoginRequest(): LoginRequest {
  return { $type: "auth.LoginRequest" };
}

export const LoginRequest = {
  $type: "auth.LoginRequest" as const,

  create(base?: DeepPartial<LoginRequest>): LoginRequest {
    return LoginRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LoginRequest>): LoginRequest {
    const message = Object.create(createBaseLoginRequest()) as LoginRequest;
    message.loginId = object.loginId ?? undefined;
    message.password = object.password ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(LoginRequest.$type, LoginRequest);

function createBaseLoginResponse(): LoginResponse {
  return { $type: "auth.LoginResponse" };
}

export const LoginResponse = {
  $type: "auth.LoginResponse" as const,

  create(base?: DeepPartial<LoginResponse>): LoginResponse {
    return LoginResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LoginResponse>): LoginResponse {
    const message = Object.create(createBaseLoginResponse()) as LoginResponse;
    message.token = object.token ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(LoginResponse.$type, LoginResponse);

function createBaseLogoutRequest(): LogoutRequest {
  return { $type: "auth.LogoutRequest" };
}

export const LogoutRequest = {
  $type: "auth.LogoutRequest" as const,

  create(base?: DeepPartial<LogoutRequest>): LogoutRequest {
    return LogoutRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LogoutRequest>): LogoutRequest {
    const message = Object.create(createBaseLogoutRequest()) as LogoutRequest;
    message.token = object.token ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(LogoutRequest.$type, LogoutRequest);

function createBaseLogoutResponse(): LogoutResponse {
  return { $type: "auth.LogoutResponse" };
}

export const LogoutResponse = {
  $type: "auth.LogoutResponse" as const,

  create(base?: DeepPartial<LogoutResponse>): LogoutResponse {
    return LogoutResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LogoutResponse>): LogoutResponse {
    const message = Object.create(createBaseLogoutResponse()) as LogoutResponse;
    message.success = object.success ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(LogoutResponse.$type, LogoutResponse);

function createBaseValidateTokenRequest(): ValidateTokenRequest {
  return { $type: "auth.ValidateTokenRequest" };
}

export const ValidateTokenRequest = {
  $type: "auth.ValidateTokenRequest" as const,

  create(base?: DeepPartial<ValidateTokenRequest>): ValidateTokenRequest {
    return ValidateTokenRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ValidateTokenRequest>): ValidateTokenRequest {
    const message = Object.create(createBaseValidateTokenRequest()) as ValidateTokenRequest;
    message.token = object.token ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(ValidateTokenRequest.$type, ValidateTokenRequest);

function createBaseValidateTokenResponse(): ValidateTokenResponse {
  return { $type: "auth.ValidateTokenResponse" };
}

export const ValidateTokenResponse = {
  $type: "auth.ValidateTokenResponse" as const,

  create(base?: DeepPartial<ValidateTokenResponse>): ValidateTokenResponse {
    return ValidateTokenResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ValidateTokenResponse>): ValidateTokenResponse {
    const message = Object.create(createBaseValidateTokenResponse()) as ValidateTokenResponse;
    message.valid = object.valid ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(ValidateTokenResponse.$type, ValidateTokenResponse);

export interface RpcAuthServiceClient {
  logIn(request: LoginRequest, ...rest: any): Observable<LoginResponse>;

  logOut(request: LogoutRequest, ...rest: any): Observable<LogoutResponse>;

  validateToken(request: ValidateTokenRequest, ...rest: any): Observable<ValidateTokenResponse>;
}

export interface RpcAuthServiceController {
  logIn(request: LoginRequest, ...rest: any): Promise<LoginResponse> | Observable<LoginResponse> | LoginResponse;

  logOut(request: LogoutRequest, ...rest: any): Promise<LogoutResponse> | Observable<LogoutResponse> | LogoutResponse;

  validateToken(
    request: ValidateTokenRequest,
    ...rest: any
  ): Promise<ValidateTokenResponse> | Observable<ValidateTokenResponse> | ValidateTokenResponse;
}

export function RpcAuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["logIn", "logOut", "validateToken"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("RpcAuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("RpcAuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const RPC_AUTH_SERVICE_NAME = "RpcAuthService";

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;
