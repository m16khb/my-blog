// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.0
//   protoc               v4.23.2
// source: user.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { wrappers } from "protobufjs";
import { Observable } from "rxjs";
import { messageTypeRegistry } from "./typeRegistry";

export const protobufPackage = "user";

export interface User {
  $type: "user.User";
  id?: string | undefined;
  loginId?: string | undefined;
  password?: string | undefined;
  name?: string | undefined;
  createdAt?: Date | undefined;
  createdBy?: string | undefined;
  updatedAt?: Date | undefined;
  updatedBy?: string | undefined;
  deletedAt?: Date | undefined;
  deletedBy?: string | undefined;
}

export interface CreateUserRequest {
  $type: "user.CreateUserRequest";
  loginId?: string | undefined;
  password?: string | undefined;
  name?: string | undefined;
}

export interface CreateUserResponse {
  $type: "user.CreateUserResponse";
  id?: string | undefined;
}

export interface FindOneUserRequest {
  $type: "user.FindOneUserRequest";
  id?: string | undefined;
}

export interface FindOneUserResponse {
  $type: "user.FindOneUserResponse";
  user?: User | undefined;
}

export interface UpdateUserRequest {
  $type: "user.UpdateUserRequest";
  id?: string | undefined;
  loginId?: string | undefined;
  password?: string | undefined;
  name?: string | undefined;
}

export interface UpdateUserResponse {
  $type: "user.UpdateUserResponse";
  id?: string | undefined;
}

export interface DeleteUserRequest {
  $type: "user.DeleteUserRequest";
  id?: string | undefined;
}

export interface DeleteUserResponse {
  $type: "user.DeleteUserResponse";
  id?: string | undefined;
}

export const USER_PACKAGE_NAME = "user";

wrappers[".google.protobuf.Timestamp"] = {
  fromObject(value: Date) {
    return { seconds: value.getTime() / 1000, nanos: (value.getTime() % 1000) * 1e6 };
  },
  toObject(message: { seconds: number; nanos: number }) {
    return new Date(message.seconds * 1000 + message.nanos / 1e6);
  },
} as any;

function createBaseUser(): User {
  return { $type: "user.User" };
}

export const User = {
  $type: "user.User" as const,

  create(base?: DeepPartial<User>): User {
    return User.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<User>): User {
    const message = Object.create(createBaseUser()) as User;
    message.id = object.id ?? undefined;
    message.loginId = object.loginId ?? undefined;
    message.password = object.password ?? undefined;
    message.name = object.name ?? undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.createdBy = object.createdBy ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    message.updatedBy = object.updatedBy ?? undefined;
    message.deletedAt = object.deletedAt ?? undefined;
    message.deletedBy = object.deletedBy ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(User.$type, User);

function createBaseCreateUserRequest(): CreateUserRequest {
  return { $type: "user.CreateUserRequest" };
}

export const CreateUserRequest = {
  $type: "user.CreateUserRequest" as const,

  create(base?: DeepPartial<CreateUserRequest>): CreateUserRequest {
    return CreateUserRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateUserRequest>): CreateUserRequest {
    const message = Object.create(createBaseCreateUserRequest()) as CreateUserRequest;
    message.loginId = object.loginId ?? undefined;
    message.password = object.password ?? undefined;
    message.name = object.name ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(CreateUserRequest.$type, CreateUserRequest);

function createBaseCreateUserResponse(): CreateUserResponse {
  return { $type: "user.CreateUserResponse" };
}

export const CreateUserResponse = {
  $type: "user.CreateUserResponse" as const,

  create(base?: DeepPartial<CreateUserResponse>): CreateUserResponse {
    return CreateUserResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateUserResponse>): CreateUserResponse {
    const message = Object.create(createBaseCreateUserResponse()) as CreateUserResponse;
    message.id = object.id ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(CreateUserResponse.$type, CreateUserResponse);

function createBaseFindOneUserRequest(): FindOneUserRequest {
  return { $type: "user.FindOneUserRequest" };
}

export const FindOneUserRequest = {
  $type: "user.FindOneUserRequest" as const,

  create(base?: DeepPartial<FindOneUserRequest>): FindOneUserRequest {
    return FindOneUserRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FindOneUserRequest>): FindOneUserRequest {
    const message = Object.create(createBaseFindOneUserRequest()) as FindOneUserRequest;
    message.id = object.id ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(FindOneUserRequest.$type, FindOneUserRequest);

function createBaseFindOneUserResponse(): FindOneUserResponse {
  return { $type: "user.FindOneUserResponse" };
}

export const FindOneUserResponse = {
  $type: "user.FindOneUserResponse" as const,

  create(base?: DeepPartial<FindOneUserResponse>): FindOneUserResponse {
    return FindOneUserResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FindOneUserResponse>): FindOneUserResponse {
    const message = Object.create(createBaseFindOneUserResponse()) as FindOneUserResponse;
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    return message;
  },
};

messageTypeRegistry.set(FindOneUserResponse.$type, FindOneUserResponse);

function createBaseUpdateUserRequest(): UpdateUserRequest {
  return { $type: "user.UpdateUserRequest" };
}

export const UpdateUserRequest = {
  $type: "user.UpdateUserRequest" as const,

  create(base?: DeepPartial<UpdateUserRequest>): UpdateUserRequest {
    return UpdateUserRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateUserRequest>): UpdateUserRequest {
    const message = Object.create(createBaseUpdateUserRequest()) as UpdateUserRequest;
    message.id = object.id ?? undefined;
    message.loginId = object.loginId ?? undefined;
    message.password = object.password ?? undefined;
    message.name = object.name ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(UpdateUserRequest.$type, UpdateUserRequest);

function createBaseUpdateUserResponse(): UpdateUserResponse {
  return { $type: "user.UpdateUserResponse" };
}

export const UpdateUserResponse = {
  $type: "user.UpdateUserResponse" as const,

  create(base?: DeepPartial<UpdateUserResponse>): UpdateUserResponse {
    return UpdateUserResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateUserResponse>): UpdateUserResponse {
    const message = Object.create(createBaseUpdateUserResponse()) as UpdateUserResponse;
    message.id = object.id ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(UpdateUserResponse.$type, UpdateUserResponse);

function createBaseDeleteUserRequest(): DeleteUserRequest {
  return { $type: "user.DeleteUserRequest" };
}

export const DeleteUserRequest = {
  $type: "user.DeleteUserRequest" as const,

  create(base?: DeepPartial<DeleteUserRequest>): DeleteUserRequest {
    return DeleteUserRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteUserRequest>): DeleteUserRequest {
    const message = Object.create(createBaseDeleteUserRequest()) as DeleteUserRequest;
    message.id = object.id ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(DeleteUserRequest.$type, DeleteUserRequest);

function createBaseDeleteUserResponse(): DeleteUserResponse {
  return { $type: "user.DeleteUserResponse" };
}

export const DeleteUserResponse = {
  $type: "user.DeleteUserResponse" as const,

  create(base?: DeepPartial<DeleteUserResponse>): DeleteUserResponse {
    return DeleteUserResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteUserResponse>): DeleteUserResponse {
    const message = Object.create(createBaseDeleteUserResponse()) as DeleteUserResponse;
    message.id = object.id ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(DeleteUserResponse.$type, DeleteUserResponse);

export interface RpcUserServiceClient {
  createUser(request: CreateUserRequest, ...rest: any): Observable<CreateUserResponse>;

  findOneUser(request: FindOneUserRequest, ...rest: any): Observable<FindOneUserResponse>;

  updateUser(request: UpdateUserRequest, ...rest: any): Observable<UpdateUserResponse>;

  deleteUser(request: DeleteUserRequest, ...rest: any): Observable<DeleteUserResponse>;
}

export interface RpcUserServiceController {
  createUser(
    request: CreateUserRequest,
    ...rest: any
  ): Promise<CreateUserResponse> | Observable<CreateUserResponse> | CreateUserResponse;

  findOneUser(
    request: FindOneUserRequest,
    ...rest: any
  ): Promise<FindOneUserResponse> | Observable<FindOneUserResponse> | FindOneUserResponse;

  updateUser(
    request: UpdateUserRequest,
    ...rest: any
  ): Promise<UpdateUserResponse> | Observable<UpdateUserResponse> | UpdateUserResponse;

  deleteUser(
    request: DeleteUserRequest,
    ...rest: any
  ): Promise<DeleteUserResponse> | Observable<DeleteUserResponse> | DeleteUserResponse;
}

export function RpcUserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createUser", "findOneUser", "updateUser", "deleteUser"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("RpcUserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("RpcUserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const RPC_USER_SERVICE_NAME = "RpcUserService";

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;
